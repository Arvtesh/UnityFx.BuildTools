// Copyright (c) Alexander Bogarsukov.
// Licensed under the MIT license. See the LICENSE.md file in the project root for more information.

#if UNITY_EDITOR_WIN

using System.IO;
using System.Text;
using System.Xml.Linq;
using SyntaxTree.VisualStudio.Unity.Bridge;
using UnityEditor;

namespace UnityFx.App.Editor
{
	/// <summary>
	/// Injects stylecop nuGet package references into projects generated by Unity.
	/// </summary>
	/// <seealso href="http://unityvs.com/documentation/api/project-file-generation/"/>
	[InitializeOnLoad]
	public class VstuProjectExporter
	{
		private const string _stylecopPackagePath = "NugetPackages\\";
		private const string _stylecopConfigPath = "..\\CodingConventions\\Common\\stylecop.json";
		private const string _rulesetPath = "..\\CodingConventions\\Cs\\CsharpRules.ruleset";
		private const string _packagesConfigPath = "packages.config";

		// Necessary for XLinq to save the xml project file in utf8.
		private class Utf8StringWriter : StringWriter
		{
			public override Encoding Encoding
			{
				get
				{
					return Encoding.UTF8;
				}
			}
		}

		/// <summary>
		/// Initializes static members of the <see cref="VstuProjectExporter"/> class.
		/// </summary>
		static VstuProjectExporter()
		{
			ProjectFilesGenerator.ProjectFileGeneration += (string name, string content) =>
			{
				// Do not add analyzers to plugin projects.
				if (!name.Contains(".Plugins."))
				{
					var document = XDocument.Parse(content);

					XNamespace xmlns = "http://schemas.microsoft.com/developer/msbuild/2003";

					var propertyGroup = new XElement(xmlns + "PropertyGroup");
					propertyGroup.Add(new XElement(xmlns + "CodeAnalysisRuleSet", _rulesetPath));
					propertyGroup.Add(new XElement(xmlns + "RunCodeAnalysis", "true"));
					document.Root.Add(propertyGroup);

					// Analyzer package reference.
					var itemGroup = new XElement(xmlns + "ItemGroup");
					itemGroup.Add(new XElement(xmlns + "Analyzer", new XAttribute("Include", _stylecopPackagePath + "StyleCop.Analyzers.1.0.2\\analyzers\\dotnet\\cs\\StyleCop.Analyzers.CodeFixes.dll")));
					itemGroup.Add(new XElement(xmlns + "Analyzer", new XAttribute("Include", _stylecopPackagePath + "StyleCop.Analyzers.1.0.2\\analyzers\\dotnet\\cs\\StyleCop.Analyzers.dll")));
					document.Root.Add(itemGroup);

					// Link to stylecop.json.
					itemGroup = new XElement(xmlns + "AdditionalFiles", new XAttribute("Include", _stylecopConfigPath), new XElement(xmlns + "Link", Path.GetFileName(_stylecopConfigPath)));
					document.Root.Add(new XElement(xmlns + "ItemGroup", itemGroup));

					// Link to CsharpCodingStandard.ruleset.
					itemGroup = new XElement(xmlns + "None", new XAttribute("Include", _rulesetPath), new XElement(xmlns + "Link", Path.GetFileName(_rulesetPath)));
					document.Root.Add(new XElement(xmlns + "ItemGroup", itemGroup));

					// NuGet packages configuration.
					document.Root.Add(new XElement(xmlns + "ItemGroup", new XElement(xmlns + "None", new XAttribute("Include", _packagesConfigPath))));

					var str = new Utf8StringWriter();
					document.Save(str);
					return str.ToString();
				}

				return content;
			};
		}
	}
}

#endif
